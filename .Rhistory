theme(axis.line = element_line(colour = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
coord_fixed()## ratio parameter defaults to 1 i.e. y / x = 1
ggplot(df, aes(b,-a))+
geom_point(aes(color=nfeature))+
# scale_colour_gradientn(colors = my_colors)+
scale_colour_gradientn(
colours=rev(brewer.pal(8,"Spectral")),
# trans="log",
breaks=c(0.1,0.2,0.3,0.4,0.5,0.6))+
xlab("")+
ylab("")+
xlim(xlow,xhigh)+ylim(ylow,yhigh)+
theme(axis.line = element_line(colour = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
coord_fixed()## ratio parameter defaults to 1 i.e. y / x = 1
ggplot(df, aes(b,-a))+
geom_point(aes(color=nfeature))+
# scale_colour_gradientn(colors = my_colors)+
scale_colour_gradientn(
colours=rev(brewer.pal(8,"Spectral")),
# trans="log",
breaks=c(0.1,0.2,0.3,0.4,0.5,0.6))+
xlab("")+
ylab("")+
theme(axis.line = element_line(colour = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
coord_fixed()## ratio parameter defaults to 1 i.e. y / x = 1
setwd("~/Projects/SpatialDynamics/SpatialDynamics")
read.csv('../Xenium/BreastS1R1/play/FOXA1_locs.csv')
locs = read.csv('../Xenium/BreastS1R1/play/FOXA1_locs.csv')
locs = read.csv('../Xenium/BreastS1R1/play/pairs/FOXA1_locs.csv')
plot.scatter()
plot(locs[[1]], locs[[2]])
######################################################
# 3. Boxplot of delay effect on all the tf-gene pairs
######################################################
# Base folder containing subfolders
base_folder <- "../Xenium/BreastS1R1/DelayPairs"
molecules_folder <- "../Xenium/BreastS1R1/MoleculesPerGene"
# Initialize a list to store Granger test scores by subfolder
granger_scores_by_folder <- list()
# Traverse subfolders
subfolders <- list.dirs(base_folder, full.names = TRUE, recursive = FALSE)
for (subfolder in subfolders) {
# Construct the file path
velo_file <- file.path(subfolder, paste0(basename(subfolder), "_velos.csv"))
genes <- strsplit(basename(subfolder), "_")[[1]]
if (length(genes) == 2 && genes[1] == genes[2]) next
# Check if the file exists
if (file.exists(velo_file)) {
velo_data <- read.csv(velo_file, header = FALSE)
if (nrow(velo_data) < 10) next
# Check if the velo_base of the first ten rows are all zero
skip_file <- all(rowSums(velo_data[1:10, 1:(ncol(velo_data) / 2)]) == 0)
if (skip_file) next
# Initialize a vector to store scores for this subfolder
granger_scores <- c()
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
# Apply filtering criteria
if ((sum(velo != 0) > (length(velo) / 2)) && (sum(velo_base != 0) > (length(velo_base) / 2))) {
score <- grangertest(velo_base, velo, order = 3)[2, 3]
granger_scores <- c(granger_scores, score)
}
}
# If there are valid scores, add them to the list
if (length(granger_scores) > 0) {
granger_scores_by_folder[[basename(subfolder)]] <- granger_scores
}
}
}
# Load necessary libraries
library(lmtest)
library(ggplot2)
for (subfolder in subfolders) {
# Construct the file path
velo_file <- file.path(subfolder, paste0(basename(subfolder), "_velos.csv"))
genes <- strsplit(basename(subfolder), "_")[[1]]
if (length(genes) == 2 && genes[1] == genes[2]) next
# Check if the file exists
if (file.exists(velo_file)) {
velo_data <- read.csv(velo_file, header = FALSE)
if (nrow(velo_data) < 10) next
# Check if the velo_base of the first ten rows are all zero
skip_file <- all(rowSums(velo_data[1:10, 1:(ncol(velo_data) / 2)]) == 0)
if (skip_file) next
# Initialize a vector to store scores for this subfolder
granger_scores <- c()
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
# Apply filtering criteria
if ((sum(velo != 0) > (length(velo) / 2)) && (sum(velo_base != 0) > (length(velo_base) / 2))) {
score <- grangertest(velo_base, velo, order = 3)[2, 3]
granger_scores <- c(granger_scores, score)
}
}
# If there are valid scores, add them to the list
if (length(granger_scores) > 0) {
granger_scores_by_folder[[basename(subfolder)]] <- granger_scores
}
}
}
split("ABC_DDD")
split("ABC_DDD", "_")
strsplit("AAA_BBB", "_")[[2]]
strsplit("AAA_BBB", "_")[[1]]
strsplit("AAA_BBB", "_")[[1]][[2]]
subfolder <- base_folder + '/' + gene_pair
subfolder <- base_folder + '\/' + gene_pair
subfolder <- file.path(base_folder, gene_pair)
###################################################################
# 5. Visualize delay significance on spatial slice
###################################################################
library(RColorBrewer)
gene_pair <- "FOXA1_KRT7"
subfolder <- file.path(base_folder, gene_pair)
scores <- granger_scores_by_folder[[gene_pair]]
file.path(base_folder, gene_pair, 'KRT7_locs.csv')
locs_file <- file.path(base_folder, gene_pair, strsplit(gene_pair, "_")[[1]][[2]])
locations <- read.csv(locs_file)
locs_file <- file.path(base_folder, gene_pair, strsplit(gene_pair, "_")[[1]][[2]], "_locs.csv")
scores <- granger_scores_by_folder[[gene_pair]]
locations <- read.csv(locs_file)
file_name <- paste0(strsplit(gene_pair, "_")[[1]][[2]], "_locs.csv")
locs_file <- file.path(base_folder, gene_pair, file_name)
scores <- granger_scores_by_folder[[gene_pair]]
locations <- read.csv(locs_file)
locations <- read.csv(locs_file, header = None)
locations <- read.csv(locs_file, header = FALSE)
View(locations)
locations <- read.csv(locs_file, header = FALSE)
delay_spatial <- data.frame(
score = scores,
x = sapply(locations, `[[`, 1), # Extract the first element of each list row
y = sapply(locations, `[[`, 2)  # Extract the second element of each list row
)
View(locations)
# Construct the file path
velo_file <- file.path(subfolder, paste0(basename(subfolder), "_velos.csv"))
genes <- strsplit(basename(subfolder), "_")[[1]]
if (length(genes) == 2 && genes[1] == genes[2]) next
# Check if the file exists
if (file.exists(velo_file)) {
velo_data <- read.csv(velo_file, header = FALSE)
if (nrow(velo_data) < 10) next
# Check if the velo_base of the first ten rows are all zero
skip_file <- all(rowSums(velo_data[1:10, 1:(ncol(velo_data) / 2)]) == 0)
if (skip_file) next
# Initialize a vector to store scores for this subfolder
granger_scores <- c()
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
# Apply filtering criteria
if ((sum(velo != 0) > (length(velo) / 2)) && (sum(velo_base != 0) > (length(velo_base) / 2))) {
score <- grangertest(velo_base, velo, order = 3)[2, 3]
granger_scores <- c(granger_scores, score)
}
}
# If there are valid scores, add them to the list
if (length(granger_scores) > 0) {
granger_scores_by_folder[[basename(subfolder)]] <- granger_scores
}
}
# Construct the file path
velo_file <- file.path(subfolder, paste0(basename(subfolder), "_velos.csv"))
genes <- strsplit(basename(subfolder), "_")[[1]]
if (length(genes) == 2 && genes[1] == genes[2]) next
velo_data <- read.csv(velo_file, header = FALSE)
if (nrow(velo_data) < 10) next
# Check if the velo_base of the first ten rows are all zero
skip_file <- all(rowSums(velo_data[1:10, 1:(ncol(velo_data) / 2)]) == 0)
if (skip_file) next
# Initialize a vector to store scores for this subfolder
granger_scores <- c()
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
# Apply filtering criteria
if ((sum(velo != 0) > (length(velo) / 2)) && (sum(velo_base != 0) > (length(velo_base) / 2))) {
score <- grangertest(velo_base, velo, order = 3)[2, 3]
granger_scores <- c(granger_scores, score)
}
}
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
# Apply filtering criteria
if ((sum(velo != 0) > (length(velo) / 2)) && (sum(velo_base != 0) > (length(velo_base) / 2))) {
score <- grangertest(velo_base, velo, order = 3)[2, 3]
granger_scores <- c(granger_scores, score)
}
else{
granger_scores <- c(granger_scores, NULL)
}
}
# Initialize a vector to store scores for this subfolder
granger_scores <- c()
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
# Apply filtering criteria
if ((sum(velo != 0) > (length(velo) / 2)) && (sum(velo_base != 0) > (length(velo_base) / 2))) {
score <- grangertest(velo_base, velo, order = 3)[2, 3]
granger_scores <- c(granger_scores, score)
}
# else{
#   granger_scores <- c(granger_scores, NULL)
# }
}
A=C(1,2,3)
a=c(1,2,3)
a
a=c(a, NULL)
a
a=c(a, None)
a=c(a, NA)
A
a
# Initialize a vector to store scores for this subfolder
granger_scores <- c()
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
# Apply filtering criteria
if ((sum(velo != 0) > (length(velo) / 2)) && (sum(velo_base != 0) > (length(velo_base) / 2))) {
score <- grangertest(velo_base, velo, order = 3)[2, 3]
granger_scores <- c(granger_scores, score)
}
else{
granger_scores <- c(granger_scores, NA)
}
}
# If there are valid scores, add them to the list
if (length(granger_scores) > 0) {
granger_scores_by_folder[[basename(subfolder)]] <- granger_scores
}
###################################################################
# 5. Visualize delay significance on spatial slice
###################################################################
library(RColorBrewer)
gene_pair <- "FOXA1_KRT7"
file_name <- paste0(strsplit(gene_pair, "_")[[1]][[2]], "_locs.csv")
locs_file <- file.path(base_folder, gene_pair, file_name)
scores <- granger_scores_by_folder[[gene_pair]]
locations <- read.csv(locs_file, header = FALSE)
View(locations)
velo_data <- read.csv(velo_file, header = FALSE)
View(velo_data)
velo_data <- read.csv(velo_file)
, header = FALSE
velo_data <- read.csv(velo_file, header = FALSE)
reference <- read.csv('../Xenium/BreastS1R1/DelayPairs/FOXA1_KRT7/KRT7_reference.csv', header = FALSE)
locations <- read.csv(locs_file, header = FALSE)[2:]
locations <- read.csv(locs_file, header = FALSE)[2:,]
locations <- read.csv(locs_file, header = FALSE)[-1,]
delay_spatial <- data.frame(
score = scores,
x = sapply(locations, `[[`, 1), # Extract the first element of each list row
y = sapply(locations, `[[`, 2)  # Extract the second element of each list row
)
View(locations)
delay_spatial <- data.frame(
score = scores, x = locations[[1]], y = locations[[2]]
)
df<-data.frame(a=delay_spatial$x, b=delay_spatial$y, velocity=delay_spatial$score)
ggplot(df, aes(a, -b))+
geom_point(aes(color=velocity))+
scale_colour_gradientn("velocity",
colours=rev(brewer.pal(8,"Spectral")),
breaks=seq(0, 5, length.out=8))+
labs(title = gene_pair,
color = "Mean Antigen Level",
size = "T Cell Level")+
xlab("")+
ylab("")+
coord_fixed()
df <- df[-which.max(df$score), ]
ggplot(df, aes(a, -b))+
geom_point(aes(color=velocity))+
scale_colour_gradientn("velocity",
colours=rev(brewer.pal(8,"Spectral")),
breaks=seq(0, 5, length.out=8))+
labs(title = gene_pair,
color = "Mean Antigen Level",
size = "T Cell Level")+
xlab("")+
ylab("")+
coord_fixed()
df<-data.frame(a=delay_spatial$x, b=delay_spatial$y, velocity=delay_spatial$score)
ggplot(df, aes(a, -b))+
geom_point(aes(color=velocity))+
scale_colour_gradientn("velocity",
colours=rev(brewer.pal(8,"Spectral")),
breaks=seq(0, 5, length.out=8))+
labs(title = gene_pair,
color = "Mean Antigen Level",
size = "T Cell Level")+
xlab("")+
ylab("")+
coord_fixed()
df <- df[-which.max(df$velocity), ]
ggplot(df, aes(a, -b))+
geom_point(aes(color=velocity))+
scale_colour_gradientn("velocity",
colours=rev(brewer.pal(8,"Spectral")),
breaks=seq(0, 5, length.out=8))+
labs(title = gene_pair,
color = "Mean Antigen Level",
size = "T Cell Level")+
xlab("")+
ylab("")+
coord_fixed()
df<-data.frame(a=delay_spatial$x, b=delay_spatial$y, velocity=delay_spatial$score)
max(df$score)
max(df$velocity)
df <- df[!is.na(df$velocity), ]
max(df$velocity)
min(df$velocity)
ggplot(df, aes(a, -b))+
geom_point(aes(color=velocity))+
scale_colour_gradientn("velocity",
colours=rev(brewer.pal(8,"Spectral")),
breaks=seq(0, 58, length.out=8))+
labs(title = gene_pair,
color = "Mean Antigen Level",
size = "T Cell Level")+
xlab("")+
ylab("")+
coord_fixed()
df <- df[-which.max(df$velocity), ]
max(df$velocity)
ggplot(df, aes(a, -b))+
geom_point(aes(color=velocity))+
scale_colour_gradientn("velocity",
colours=rev(brewer.pal(8,"Spectral")),
breaks=seq(0, 50, length.out=8))+
labs(title = gene_pair,
color = "Mean Antigen Level",
size = "T Cell Level")+
xlab("")+
ylab("")+
coord_fixed()
weight<-gua_kernel_weight(df[, c("x", "y")],alpha)
k=100 # the number of neighbors we want to use
alpha=0.85 # the threshold of weight
sigma=10
gua_kernel_weight<-function(coords,alpha){
dis<-distance(coords,method = 'euclidean')
kg<-exp(-dis/(2*sigma^2))
# normailze
# kg<-apply(kg,1,function(x){
# x=x/sum(x)
# return(x)
# })
kg2<-apply(kg,1,function(x){
x[x<alpha]=0
return(x)
})
# dd<-t(apply(dis,1,order))
# knestest<-dd[,2:k+1]
return(kg2)
}
weight<-gua_kernel_weight(df[, c("x", "y")],alpha)
install.packages("philentropy")
library(philentropy)
weight<-gua_kernel_weight(df[, c("x", "y")],alpha)
weight<-gua_kernel_weight(df[, c("a", "b")],alpha)
velo_amp<-weight%*%array(df$velocity,dim=c(length(tcell_level),1))
velo_amp<-weight%*%array(df$velocity,dim=c(length(df$velocity),1))
df$amp = velo_amp
ggplot(df, aes(a, -b))+
geom_point(aes(color=velocity))+
scale_colour_gradientn("amp",
colours=rev(brewer.pal(8,"Spectral")),
breaks=seq(0, 50, length.out=8))+
labs(title = gene_pair,
color = "Mean Antigen Level",
size = "T Cell Level")+
xlab("")+
ylab("")+
coord_fixed()
ggplot(df, aes(a, -b))+
geom_point(aes(color=amp))+
scale_colour_gradientn("velocity",
colours=rev(brewer.pal(8,"Spectral")),
breaks=seq(0, 50, length.out=8))+
labs(title = gene_pair,
color = "Mean Antigen Level",
size = "T Cell Level")+
xlab("")+
ylab("")+
coord_fixed()
df<-data.frame(a=delay_spatial$x, b=delay_spatial$y, velocity=delay_spatial$score)
df <- df[!is.na(df$velocity), ]
threshold <- quantile(df$score, 0.25)
threshold <- quantile(df$velocity, 0.25)
# Assign colors based on the threshold
df$color <- ifelse(df$velocity > threshold, "red", "lightgrey")
# Plot using ggplot2
ggplot(new_df, aes(x = a, y = b, color = color)) +
geom_point(size = 3) +  # Scatter plot with points
scale_color_identity() +  # Use predefined colors
theme_minimal() +
labs(title = "Spatial Distribution of Points",
x = "X Location", y = "Y Location")
# Plot using ggplot2
ggplot(df, aes(x = a, y = b, color = color)) +
geom_point(size = 3) +  # Scatter plot with points
scale_color_identity() +  # Use predefined colors
theme_minimal() +
labs(title = "Spatial Distribution of Points",
x = "X Location", y = "Y Location")
threshold <- quantile(df$velocity, 0.1)
# Assign colors based on the threshold
df$color <- ifelse(df$velocity > threshold, "red", "lightgrey")
# Plot using ggplot2
ggplot(df, aes(x = a, y = b, color = color)) +
geom_point(size = 3) +  # Scatter plot with points
scale_color_identity() +  # Use predefined colors
theme_minimal() +
labs(title = "Spatial Distribution of Points",
x = "X Location", y = "Y Location")
threshold <- quantile(df$velocity, 0.75)
# Assign colors based on the threshold
df$color <- ifelse(df$velocity > threshold, "red", "lightgrey")
# Plot using ggplot2
ggplot(df, aes(x = a, y = b, color = color)) +
geom_point(size = 3) +  # Scatter plot with points
scale_color_identity() +  # Use predefined colors
theme_minimal() +
labs(title = "Spatial Distribution of Points",
x = "X Location", y = "Y Location")
# Plot using ggplot2
ggplot(df, aes(x = a, y = b, color = color)) +
geom_point(size = 0.3) +  # Scatter plot with points
scale_color_identity() +  # Use predefined colors
theme_minimal() +
labs(title = "Spatial Distribution of Points",
x = "X Location", y = "Y Location")
threshold <- quantile(df$velocity, 0.9)
# Assign colors based on the threshold
df$color <- ifelse(df$velocity > threshold, "red", "lightgrey")
# Plot using ggplot2
ggplot(df, aes(x = a, y = b, color = color)) +
geom_point(size = 0.3) +  # Scatter plot with points
scale_color_identity() +  # Use predefined colors
theme_minimal() +
labs(title = "Spatial Distribution of Points",
x = "X Location", y = "Y Location")
threshold <- quantile(df$velocity, 0.95)
# Assign colors based on the threshold
df$color <- ifelse(df$velocity > threshold, "red", "lightgrey")
# Plot using ggplot2
ggplot(df, aes(x = a, y = b, color = color)) +
geom_point(size = 0.3) +  # Scatter plot with points
scale_color_identity() +  # Use predefined colors
theme_minimal() +
labs(title = "Spatial Distribution of Points",
x = "X Location", y = "Y Location")
