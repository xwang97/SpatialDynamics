# counts
labels<-results$labels
ggplot(data.frame(labels), aes(x=labels)) +
geom_bar()
pbmc<-ifnb.list$`481_Wound_map/481_Wound`
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
# NOTE: This process can take a long time for big datasets, comment out for expediency. More
# approximate techniques such as those implemented in ElbowPlot() can be used to reduce
# computation time
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
JackStrawPlot(pbmc, dims = 1:15)
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
# Look at cluster IDs of the first 5 cells
head(Idents(pbmc), 5)
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages =
# 'umap-learn')
pbmc <- RunUMAP(pbmc, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap")
library(SingleR)
library(scRNAseq)
ref<-HumanPrimaryCellAtlasData()
results<-SingleR(test = as.SingleCellExperiment(pbmc),ref=ref,labels = ref$label.main)
pbmc$singlr_labels<-results$labels
DimPlot(pbmc,reduction = 'umap',group.by = 'singlr_labels',label = TRUE)
# counts
labels2<-results$labels
ggplot(data.frame(labels), aes(x=labels)) +
geom_bar()
ggplot(data.frame(labels2), aes(x=labels2)) +
geom_bar()
ggplot(data.frame(labels2), aes(x=labels2)) +
geom_bar()+
theme(axis.text.x = element_text(angle = 90))
ggplot(data.frame(labels2), aes(x=labels2)) +
geom_bar()+
theme(axis.text.x = element_text(angle = 45))
ggplot(data.frame(labels2), aes(x=labels2)) +
geom_bar()+
theme(axis.text.x = element_text(angle = 45),panel.background = element_blank())
unique(labels)
unique(labels2)
DimPlot(pbmc,reduction = 'umap',group.by = 'singlr_labels',label = TRUE)
rbind(unique(labels),unique(labels2))
cbind(unique(labels),unique(labels2))
c(unique(labels),unique(labels2))
unique(c(unique(labels),unique(labels2)))
uni_labels<-unique(c(unique(labels),unique(labels2)))
labels==uni_labels
sum(labels==uni_labels[1])
uni_labels[1]
typeof(uni_labels)
count1<-lapply(uni_labels,function(x){
return(sum(labels==x))
})
count1
count2<-lapply(uni_labels,function(x){
return(sum(labels2==x))
})
length(labels)
group<-c(rep("Pustule",length(labels)),rep("Wound",length(labels2)))
group<-c(rep("Pustule",length(labels)),rep("Wound",length(labels2)))
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2))) +
geom_bar()+
theme(axis.text.x = element_text(angle = 45),panel.background = element_blank())
group<-c(rep("Pustule",length(labels)),rep("Wound",length(labels2)))
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar()+
theme(axis.text.x = element_text(angle = 45),panel.background = element_blank())
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(position="dodge", stat="identity")+
theme(axis.text.x = element_text(angle = 45),panel.background = element_blank())
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(position="dodge")+
theme(axis.text.x = element_text(angle = 45),panel.background = element_blank())
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(position="dodge")+
theme(axis.text.x = element_text(angle = 90),panel.background = element_blank())
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(position="dodge")+
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1),panel.background = element_blank())
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(position="dodge")+
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=2),panel.background = element_blank())
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(position="dodge")+
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1),panel.background = element_blank())
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(position="dodge")+
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1.2),panel.background = element_blank())
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(position="dodge")+
theme(axis.text.x = element_text(angle = 90,vjust = 1, hjust=1.2),panel.background = element_blank())
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(position="dodge")+
theme(axis.text.x = element_text(angle = 90,vjust = 1, hjust=1),panel.background = element_blank())
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(position="dodge")+
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1),panel.background = element_blank())
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(position="dodge")+
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1),
panel.background = element_blank())+
scale_fill_manual(values=c("red","blue"))
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(position="dodge")+
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1),
panel.background = element_blank())+
scale_fill_manual(values=c("red","blue"))+
xlab("Cell Type")
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(position="dodge")+
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1),
panel.background = element_blank())+
scale_fill_manual(values=c("red","blue"))+
xlab("")
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(aes(y = (..count..)/sum(..count..)),position="dodge")+
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1),
panel.background = element_blank())+
scale_fill_manual(values=c("red","blue"))+
xlab("")
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count")+
geom_text(aes( label = scales::percent(..prop..),
y= ..prop.. ), stat= "count", vjust = -.5) +
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1),
panel.background = element_blank())+
scale_fill_manual(values=c("red","blue"))+
xlab("")+
ylab("Percent")+
scale_y_continuous(labels = scales::percent)
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),group=group)) +
geom_bar(aes(y = ..prop.., fill = factor(..x..)), stat="count")+
geom_text(aes( label = scales::percent(..prop..),
y= ..prop.. ), stat= "count", vjust = -.5) +
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1),
panel.background = element_blank())+
scale_fill_manual(values=c("red","blue"))+
xlab("")+
ylab("Percent")+
scale_y_continuous(labels = scales::percent)
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(aes(y = (..count..)/sum(..count..)),stat = "dodge")+
geom_text(aes( label = scales::percent(..prop..),
y= ..prop.. ), stat= "count", vjust = -.5) +
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1),
panel.background = element_blank())+
scale_fill_manual(values=c("red","blue"))+
xlab("")+
ylab("Percent")+
scale_y_continuous(labels = scales::percent)
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(aes(y = (..count..)/sum(..count..)),position  = "dodge")+
geom_text(aes( label = scales::percent(..prop..),
y= ..prop.. ), stat= "count", vjust = -.5) +
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1),
panel.background = element_blank())+
scale_fill_manual(values=c("red","blue"))+
xlab("")+
ylab("Percent")+
scale_y_continuous(labels = scales::percent)
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(aes(y = (..count..)/sum(..count..)),position  = "dodge")+
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1),
panel.background = element_blank())+
scale_fill_manual(values=c("red","blue"))+
xlab("")+
ylab("Percent")+
scale_y_continuous(labels = scales::percent)
scRNAdata <- readRDS("~/Documents/spatial_data/scFEA/scRNA result/scRNAdata.rds")
labels_all<-c(labels,labels2)
antigen<-scRNAdata$all481$antigen_mean
df<-data.frame(labels_all,antigen,group)
ggplot(df,aes(x=labels_all,y=antigen,fill=group)) +
geom_boxplot()+
ylab("Mean Antigen Level")+
scale_fill_brewer(palette="Pastel1")+
theme_bw()+
theme(panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA,size = 1))
ggplot(df,aes(x=labels_all,y=antigen,fill=group)) +
geom_boxplot()+
ylab("Mean Antigen Level")+
scale_fill_brewer(palette="Pastel1")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA,size = 1))
ggplot(df,aes(x=labels_all,y=antigen,fill=group)) +
geom_boxplot()+
xlab("")+
ylab("Mean Antigen Level")+
scale_fill_brewer(palette="Pastel1")+
theme_bw()+
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA,size = 1))
pbmc<-ifnb.list$`481_Pustule_map/481_Pustule`
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
# NOTE: This process can take a long time for big datasets, comment out for expediency. More
# approximate techniques such as those implemented in ElbowPlot() can be used to reduce
# computation time
pbmc <- JackStraw(pbmc, num.replicate = 100)
# NOTE: This process can take a long time for big datasets, comment out for expediency. More
# approximate techniques such as those implemented in ElbowPlot() can be used to reduce
# computation time
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
JackStrawPlot(pbmc, dims = 1:15)
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
# Look at cluster IDs of the first 5 cells
head(Idents(pbmc), 5)
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages =
# 'umap-learn')
pbmc <- RunUMAP(pbmc, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap")
library(SingleR)
library(scRNAseq)
ref<-HumanPrimaryCellAtlasData()
results<-SingleR(test = as.SingleCellExperiment(pbmc),ref=ref,labels = ref$label.main)
pbmc$singlr_labels<-results$labels
DimPlot(pbmc,reduction = 'umap',group.by = 'singlr_labels',label = TRUE)
group<-c(rep("Pustule",length(labels)),rep("Wound",length(labels2)))
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(aes(y = (..count..)/sum(..count..)),position  = "dodge")+
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA,size = 1))+
scale_fill_manual(values=c("red","blue"))+
xlab("")+
ylab("Percent")+
scale_y_continuous(labels = scales::percent)
HumanbreastV1 <- readRDS("~/Documents/spatial_data/cleanData/HumanbreastV1.rds")
coords = cbind(as.integer(HumanbreastV1@images[["A1"]]@coordinates[["imagerow"]]), as.integer(HumanbreastV1@images[["A1"]]@coordinates[["imagecol"]]))
df<-data.frame(a=coords[,1],b=coords[,2],nfeature=HumanbreastV1@meta.data$nFeature_Spatial)
ggplot(df, aes(b,-a))+
geom_point(aes(color=nfeature))+
# scale_colour_gradientn(colors = my_colors)+
scale_colour_gradientn("antigen_mean",
colours=rev(brewer.pal(8,"Spectral")),
# trans="log",
breaks=c(0.1,0.2,0.3,0.4,0.5,0.6))+
labs(title = paste0(name,"(Left: Pustule Right: Wound)"),
color = "Mean Antigen Level",
size = "T Cell Level")+
xlab("")+
ylab("")+
xlim(xlow,xhigh)+ylim(ylow,yhigh)+
theme(axis.line = element_line(colour = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
coord_fixed()## ratio parameter defaults to 1 i.e. y / x = 1
library(RColorBrewer)
ggplot(df, aes(b,-a))+
geom_point(aes(color=nfeature))+
# scale_colour_gradientn(colors = my_colors)+
scale_colour_gradientn("antigen_mean",
colours=rev(brewer.pal(8,"Spectral")),
# trans="log",
breaks=c(0.1,0.2,0.3,0.4,0.5,0.6))+
labs(title = paste0(name,"(Left: Pustule Right: Wound)"),
color = "Mean Antigen Level",
size = "T Cell Level")+
xlab("")+
ylab("")+
xlim(xlow,xhigh)+ylim(ylow,yhigh)+
theme(axis.line = element_line(colour = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
coord_fixed()## ratio parameter defaults to 1 i.e. y / x = 1
ggplot(df, aes(b,-a))+
geom_point(aes(color=nfeature))+
# scale_colour_gradientn(colors = my_colors)+
scale_colour_gradientn(
colours=rev(brewer.pal(8,"Spectral")),
# trans="log",
breaks=c(0.1,0.2,0.3,0.4,0.5,0.6))+
xlab("")+
ylab("")+
xlim(xlow,xhigh)+ylim(ylow,yhigh)+
theme(axis.line = element_line(colour = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
coord_fixed()## ratio parameter defaults to 1 i.e. y / x = 1
ggplot(df, aes(b,-a))+
geom_point(aes(color=nfeature))+
# scale_colour_gradientn(colors = my_colors)+
scale_colour_gradientn(
colours=rev(brewer.pal(8,"Spectral")),
# trans="log",
breaks=c(0.1,0.2,0.3,0.4,0.5,0.6))+
xlab("")+
ylab("")+
theme(axis.line = element_line(colour = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
coord_fixed()## ratio parameter defaults to 1 i.e. y / x = 1
setwd("~/Projects/SpatialDynamics/SpatialDynamics")
# Load necessary libraries
library(tseries)
install.packages('tseries')
# Load necessary libraries
library(tseries)
library(ggplot2)
# Read the saved velo comparison CSV file
velo_data <- read.csv("../Xenium/BreastS1R1/velos/GATA3_FOXA1.csv", header = FALSE)
# Initialize a vector to store Granger test scores
granger_scores <- c()
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
# Prepare data for Granger test
data <- data.frame(velo_base, velo)
# Perform the Granger test and extract the p-value
granger_result <- grangertest(velo_base ~ velo, order = 1, data = data)
granger_scores <- c(granger_scores, granger_result$`Pr(>F)`[2])
}
# Load necessary libraries
library(lmtest)
library(ggplot2)
# Read the saved velo comparison CSV file
velo_data <- read.csv("../Xenium/BreastS1R1/velos/GATA3_FOXA1.csv", header = FALSE)
# Initialize a vector to store Granger test scores
granger_scores <- c()
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
# Prepare data for Granger test
data <- data.frame(velo_base, velo)
# Perform the Granger test and extract the p-value
granger_result <- grangertest(velo_base ~ velo, order = 1, data = data)
granger_scores <- c(granger_scores, granger_result$`Pr(>F)`[2])
}
# Load necessary libraries
library(lmtest)
library(ggplot2)
# Read the saved velo comparison CSV file
velo_data <- read.csv("../Xenium/BreastS1R1/velos/GATA3_FOXA1.csv", header = FALSE)
# Initialize a vector to store Granger test scores
granger_scores <- c()
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
score <- grangertest(t(velo), t(velo_base), order=1)[2,4]
granger_scores <- c(granger_scores, score)
}
View(velo_data)
i=1
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
score <- grangertest(t(velo), t(velo_base), order=1)[2,4]
t(velo)
ncol(t(velo))
ncol((velo))
score <- grangertest(velo, velo_base, order=1)[2,4]
# Load necessary libraries
library(lmtest)
library(ggplot2)
# Read the saved velo comparison CSV file
velo_data <- read.csv("../Xenium/BreastS1R1/velos/GATA3_FOXA1.csv", header = FALSE)
# Initialize a vector to store Granger test scores
granger_scores <- c()
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
score <- grangertest(velo, velo_base, order=1)[2,4]
granger_scores <- c(granger_scores, score)
}
# Load necessary libraries
library(lmtest)
library(ggplot2)
# Read the saved velo comparison CSV file
velo_data <- read.csv("../Xenium/BreastS1R1/velos/GATA3_FOXA1.csv", header = FALSE)
# Initialize a vector to store Granger test scores
granger_scores <- c()
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
if (length(velo_base) > 2 && length(velo) > 2 && sd(velo_base) > 0 && sd(velo) > 0){
score <- grangertest(velo, velo_base, order=1)[2,4]
granger_scores <- c(granger_scores, score)
}
}
# Load necessary libraries
library(lmtest)
library(ggplot2)
# Read the saved velo comparison CSV file
velo_data <- read.csv("../Xenium/BreastS1R1/velos/GATA3_FOXA1.csv", header = FALSE)
# Initialize a vector to store Granger test scores
granger_scores <- c()
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
if (length(velo_base) > 2 && length(velo) > 2 && sd(velo_base) > 0 && sd(velo) > 0){
score <- grangertest(velo, velo_base, order=1)[2,4]
granger_scores <- c(granger_scores, score)
}
}
