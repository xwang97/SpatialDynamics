panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA,size = 1))
pbmc<-ifnb.list$`481_Pustule_map/481_Pustule`
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
pbmc <- NormalizeData(pbmc)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
# NOTE: This process can take a long time for big datasets, comment out for expediency. More
# approximate techniques such as those implemented in ElbowPlot() can be used to reduce
# computation time
pbmc <- JackStraw(pbmc, num.replicate = 100)
# NOTE: This process can take a long time for big datasets, comment out for expediency. More
# approximate techniques such as those implemented in ElbowPlot() can be used to reduce
# computation time
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
JackStrawPlot(pbmc, dims = 1:15)
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
# Look at cluster IDs of the first 5 cells
head(Idents(pbmc), 5)
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages =
# 'umap-learn')
pbmc <- RunUMAP(pbmc, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(pbmc, reduction = "umap")
library(SingleR)
library(scRNAseq)
ref<-HumanPrimaryCellAtlasData()
results<-SingleR(test = as.SingleCellExperiment(pbmc),ref=ref,labels = ref$label.main)
pbmc$singlr_labels<-results$labels
DimPlot(pbmc,reduction = 'umap',group.by = 'singlr_labels',label = TRUE)
group<-c(rep("Pustule",length(labels)),rep("Wound",length(labels2)))
ggplot(data.frame(c(labels,labels2)), aes(x=c(labels,labels2),fill=group)) +
geom_bar(aes(y = (..count..)/sum(..count..)),position  = "dodge")+
theme(axis.text.x = element_text(angle = 90,vjust = 0.5, hjust=1),
panel.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA,size = 1))+
scale_fill_manual(values=c("red","blue"))+
xlab("")+
ylab("Percent")+
scale_y_continuous(labels = scales::percent)
HumanbreastV1 <- readRDS("~/Documents/spatial_data/cleanData/HumanbreastV1.rds")
coords = cbind(as.integer(HumanbreastV1@images[["A1"]]@coordinates[["imagerow"]]), as.integer(HumanbreastV1@images[["A1"]]@coordinates[["imagecol"]]))
df<-data.frame(a=coords[,1],b=coords[,2],nfeature=HumanbreastV1@meta.data$nFeature_Spatial)
ggplot(df, aes(b,-a))+
geom_point(aes(color=nfeature))+
# scale_colour_gradientn(colors = my_colors)+
scale_colour_gradientn("antigen_mean",
colours=rev(brewer.pal(8,"Spectral")),
# trans="log",
breaks=c(0.1,0.2,0.3,0.4,0.5,0.6))+
labs(title = paste0(name,"(Left: Pustule Right: Wound)"),
color = "Mean Antigen Level",
size = "T Cell Level")+
xlab("")+
ylab("")+
xlim(xlow,xhigh)+ylim(ylow,yhigh)+
theme(axis.line = element_line(colour = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
coord_fixed()## ratio parameter defaults to 1 i.e. y / x = 1
library(RColorBrewer)
ggplot(df, aes(b,-a))+
geom_point(aes(color=nfeature))+
# scale_colour_gradientn(colors = my_colors)+
scale_colour_gradientn("antigen_mean",
colours=rev(brewer.pal(8,"Spectral")),
# trans="log",
breaks=c(0.1,0.2,0.3,0.4,0.5,0.6))+
labs(title = paste0(name,"(Left: Pustule Right: Wound)"),
color = "Mean Antigen Level",
size = "T Cell Level")+
xlab("")+
ylab("")+
xlim(xlow,xhigh)+ylim(ylow,yhigh)+
theme(axis.line = element_line(colour = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
coord_fixed()## ratio parameter defaults to 1 i.e. y / x = 1
ggplot(df, aes(b,-a))+
geom_point(aes(color=nfeature))+
# scale_colour_gradientn(colors = my_colors)+
scale_colour_gradientn(
colours=rev(brewer.pal(8,"Spectral")),
# trans="log",
breaks=c(0.1,0.2,0.3,0.4,0.5,0.6))+
xlab("")+
ylab("")+
xlim(xlow,xhigh)+ylim(ylow,yhigh)+
theme(axis.line = element_line(colour = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
coord_fixed()## ratio parameter defaults to 1 i.e. y / x = 1
ggplot(df, aes(b,-a))+
geom_point(aes(color=nfeature))+
# scale_colour_gradientn(colors = my_colors)+
scale_colour_gradientn(
colours=rev(brewer.pal(8,"Spectral")),
# trans="log",
breaks=c(0.1,0.2,0.3,0.4,0.5,0.6))+
xlab("")+
ylab("")+
theme(axis.line = element_line(colour = "white"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())+
coord_fixed()## ratio parameter defaults to 1 i.e. y / x = 1
load("/home/xiao/Projects/SpatialDynamics/Xenium/BreastS1R1/TF_gene_list_xenium.RData")
load("/home/xiao/Projects/SpatialDynamics/Xenium/BreastS1R1/TF_gene_list_xenium.RData")
View(TF_gene_list_xenium)
TF_gene_list_xenium$AR
TF_gene_list_xenium$ELF3
TF_gene_list_xenium$ESR1
TF_gene_list_xenium$FOXA1
TF_gene_list_xenium$FOXP3
TF_gene_list_xenium$GATA3
setwd("~/Projects/SpatialDynamics/SpatialDynamics")
######################################################
# 3. Boxplot of delay effect on all the tf-gene pairs
######################################################
# Base folder containing subfolders
base_folder <- "../Xenium/BreastS1R1/DelayPairs"
molecules_folder <- "../Xenium/BreastS1R1/MoleculesPerGene"
# Initialize a list to store Granger test scores by subfolder
granger_scores_by_folder <- list()
subfolders <- list.dirs(base_folder, full.names = TRUE, recursive = FALSE)
for (subfolder in subfolders) {
# Construct the file path
velo_file <- file.path(subfolder, paste0(basename(subfolder), "_velos.csv"))
genes <- strsplit(basename(subfolder), "_")[[1]]
if (length(genes) == 2 && genes[1] == genes[2]) next
# Check if the file exists
if (file.exists(velo_file)) {
velo_data <- read.csv(velo_file, header = FALSE)
if (nrow(velo_data) < 10) next
# Check if the velo_base of the first ten rows are all zero
skip_file <- all(rowSums(velo_data[1:10, 1:(ncol(velo_data) / 2)]) == 0)
if (skip_file) next
# Initialize a vector to store scores for this subfolder
granger_scores <- c()
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
# Apply filtering criteria
if ((sum(velo != 0) > (length(velo) / 2)) && (sum(velo_base != 0) > (length(velo_base) / 2))) {
score <- grangertest(velo_base, velo, order = 3)[2, 3]
granger_scores <- c(granger_scores, score)
}
else{
granger_scores <- c(granger_scores, NA)
}
}
# If there are valid scores, add them to the list
if (length(granger_scores) > 0) {
granger_scores_by_folder[[basename(subfolder)]] <- granger_scores
}
}
}
# Load necessary libraries
library(lmtest)
library(ggplot2)
library(philentropy)
######################################################
# 3. Boxplot of delay effect on all the tf-gene pairs
######################################################
# Base folder containing subfolders
base_folder <- "../Xenium/BreastS1R1/DelayPairs"
molecules_folder <- "../Xenium/BreastS1R1/MoleculesPerGene"
# Initialize a list to store Granger test scores by subfolder
granger_scores_by_folder <- list()
subfolders <- list.dirs(base_folder, full.names = TRUE, recursive = FALSE)
for (subfolder in subfolders) {
# Construct the file path
velo_file <- file.path(subfolder, paste0(basename(subfolder), "_velos.csv"))
genes <- strsplit(basename(subfolder), "_")[[1]]
if (length(genes) == 2 && genes[1] == genes[2]) next
# Check if the file exists
if (file.exists(velo_file)) {
velo_data <- read.csv(velo_file, header = FALSE)
if (nrow(velo_data) < 10) next
# Check if the velo_base of the first ten rows are all zero
skip_file <- all(rowSums(velo_data[1:10, 1:(ncol(velo_data) / 2)]) == 0)
if (skip_file) next
# Initialize a vector to store scores for this subfolder
granger_scores <- c()
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
# Apply filtering criteria
if ((sum(velo != 0) > (length(velo) / 2)) && (sum(velo_base != 0) > (length(velo_base) / 2))) {
score <- grangertest(velo_base, velo, order = 3)[2, 3]
granger_scores <- c(granger_scores, score)
}
else{
granger_scores <- c(granger_scores, NA)
}
}
# If there are valid scores, add them to the list
if (length(granger_scores) > 0) {
granger_scores_by_folder[[basename(subfolder)]] <- granger_scores
}
}
}
skip_file <- skip_file || all(rowSums(velo_data[1:10, (ncol(velo_data) / 2):]) == 0)
# Check if the velo_base of the first ten rows are all zero
skip_file <- all(rowSums(velo_data[1:10, 1:(ncol(velo_data) / 2)]) == 0) || all(rowSums(velo_data[1:10, (ncol(velo_data)/2+1):ncol(velo_data)]))
# Check if the velo_base of the first ten rows are all zero
skip_file <- all(rowSums(velo_data[1:10, 1:(ncol(velo_data) / 2)]) == 0) || all(rowSums(velo_data[1:10, ncol(velo_data)/2+1:ncol(velo_data)]) == 0)
velo_data <- read.csv(velo_file, header = FALSE)
if (nrow(velo_data) < 10) next
# Check if the velo_base of the first ten rows are all zero
skip_file <- all(rowSums(velo_data[1:10, 1:(ncol(velo_data) / 2)]) == 0) || all(rowSums(velo_data[1:10, ncol(velo_data)/2+1:ncol(velo_data)]) == 0)
ncol(velo_data)/2+1:ncol(velo_data)
dim(velo_data)
ncol(velo_data)
ncol(velo_data)/2+1
ncol(velo_data)/2+1:ncol(velo_data)
(ncol(velo_data)/2+1):ncol(velo_data)
# Check if the velo_base of the first ten rows are all zero
skip_file <- all(rowSums(velo_data[1:10, 1:(ncol(velo_data) / 2)]) == 0) || all(rowSums(velo_data[1:10, (ncol(velo_data)/2+1):ncol(velo_data)]) == 0)
for (subfolder in subfolders) {
# Construct the file path
velo_file <- file.path(subfolder, paste0(basename(subfolder), "_velos.csv"))
genes <- strsplit(basename(subfolder), "_")[[1]]
if (length(genes) == 2 && genes[1] == genes[2]) next
# Check if the file exists
if (file.exists(velo_file)) {
velo_data <- read.csv(velo_file, header = FALSE)
if (nrow(velo_data) < 10) next
# Check if the velo_base of the first ten rows are all zero
skip_file <- all(rowSums(velo_data[1:10, 1:(ncol(velo_data) / 2)]) == 0) || all(rowSums(velo_data[1:10, (ncol(velo_data)/2+1):ncol(velo_data)]) == 0)
if (skip_file) next
# Initialize a vector to store scores for this subfolder
granger_scores <- c()
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
# Apply filtering criteria
if ((sum(velo != 0) > (length(velo) / 2)) && (sum(velo_base != 0) > (length(velo_base) / 2))) {
score <- grangertest(velo_base, velo, order = 3)[2, 3]
granger_scores <- c(granger_scores, score)
}
else{
granger_scores <- c(granger_scores, NA)
}
}
# If there are valid scores, add them to the list
if (length(granger_scores) > 0) {
granger_scores_by_folder[[basename(subfolder)]] <- granger_scores
}
}
}
score <- grangertest(velo_base, velo, order = 3)[2, 3]
velo_base
velo
score <- grangertest(velo_base, velo, order = 2)[2, 3]
score <- grangertest(velo_base, velo, order = 1)[2, 3]
score <- grangertest(velo_base, velo, order = 2)[2, 3]
for (subfolder in subfolders) {
# Construct the file path
velo_file <- file.path(subfolder, paste0(basename(subfolder), "_velos.csv"))
genes <- strsplit(basename(subfolder), "_")[[1]]
if (length(genes) == 2 && genes[1] == genes[2]) next
# Check if the file exists
if (file.exists(velo_file)) {
velo_data <- read.csv(velo_file, header = FALSE)
if (nrow(velo_data) < 10) next
# Check if the velo_base of the first ten rows are all zero
skip_file <- all(rowSums(velo_data[1:10, 1:(ncol(velo_data) / 2)]) == 0) || all(rowSums(velo_data[1:10, (ncol(velo_data)/2+1):ncol(velo_data)]) == 0)
if (skip_file) next
# Initialize a vector to store scores for this subfolder
granger_scores <- c()
# Loop through each row in the data
for (i in 1:nrow(velo_data)) {
# Split the row into velo_base and velo
row <- as.numeric(velo_data[i, ])
mid <- length(row) / 2
velo_base <- row[1:mid]
velo <- row[(mid + 1):length(row)]
# Apply filtering criteria
if ((sum(velo != 0) > (length(velo) / 2)) && (sum(velo_base != 0) > (length(velo_base) / 2))) {
score <- grangertest(velo_base, velo, order = 2)[2, 3]
granger_scores <- c(granger_scores, score)
}
else{
granger_scores <- c(granger_scores, NA)
}
}
# If there are valid scores, add them to the list
if (length(granger_scores) > 0) {
granger_scores_by_folder[[basename(subfolder)]] <- granger_scores
}
}
}
# Create a boxplot with subfolder names as labels
ggplot(plot_data[plot_data$folder != "Delayed", ], aes(x = folder, y = score)) +
geom_boxplot(fill = "lightblue", color = "darkblue", outlier.shape = NA) +
ylim(0, 6) +
labs(title = "Boxplot of Granger Test Scores by Subfolder", y = "F-Statistic", x = "Gene Pairs") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
# Simulate the random scenario
set.seed(123)  # For reproducibility
random_granger_scores <- c()
for (i in 1:2000) {  # Simulate 100 random pairs
# Generate random velo_base and velo vectors
velo_base <- rnorm(10, mean = 0, sd = 1)  # Random normal distribution
velo <- rnorm(10, mean = 2, sd = 1)
# Compute Granger test
score <- grangertest(velo_base, velo, order = 3)[2, 3]
random_granger_scores <- c(random_granger_scores, score)
}
random_granger_scores <- c()
for (i in 1:2000) {  # Simulate 100 random pairs
# Generate random velo_base and velo vectors
velo_base <- rnorm(10, mean = 0, sd = 1)  # Random normal distribution
velo <- rnorm(10, mean = 2, sd = 1)
# Compute Granger test
score <- grangertest(velo_base, velo, order = 2)[2, 3]
random_granger_scores <- c(random_granger_scores, score)
}
# Add the random scenario to the data list
granger_scores_by_folder[["Random"]] <- random_granger_scores
# Remove NaN values
delayed_granger_scores <- delayed_granger_scores[!is.nan(delayed_granger_scores)]
# Convert the list to a data frame for plotting
plot_data <- do.call(rbind, lapply(names(granger_scores_by_folder), function(folder) {
data.frame(folder = folder, score = granger_scores_by_folder[[folder]])
}))
# Create a boxplot with subfolder names as labels
ggplot(plot_data[plot_data$folder != "Delayed", ], aes(x = folder, y = score)) +
geom_boxplot(fill = "lightblue", color = "darkblue", outlier.shape = NA) +
ylim(0, 6) +
labs(title = "Boxplot of Granger Test Scores by Subfolder", y = "F-Statistic", x = "Gene Pairs") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better readability
###################################################################
# 5. Visualize delay significance on spatial slice
###################################################################
library(RColorBrewer)
gene_pair <- "FOXA1_KRT7"
file_name <- paste0(strsplit(gene_pair, "_")[[1]][[2]], "_locs.csv")
locs_file <- file.path(base_folder, gene_pair, file_name)
scores <- granger_scores_by_folder[[gene_pair]]
locations <- read.csv(locs_file, header = FALSE)[-1,]
delay_spatial <- data.frame(
score = scores, x = locations[[1]], y = locations[[2]]
)
df<-data.frame(a=delay_spatial$x, b=delay_spatial$y, velocity=delay_spatial$score)
df <- df[!is.na(df$velocity), ]
ggplot(df, aes(a, -b))+
geom_point(aes(color=amp))+
scale_colour_gradientn("velocity",
colours=rev(brewer.pal(8,"Spectral")),
breaks=seq(0, 50, length.out=8))+
labs(title = gene_pair,
color = "Mean Antigen Level",
size = "T Cell Level")+
xlab("")+
ylab("")+
coord_fixed()
View(df)
ggplot(df, aes(a, -b))+
geom_point(aes(color=velocity))+
scale_colour_gradientn("velocity",
colours=rev(brewer.pal(8,"Spectral")),
breaks=seq(0, 50, length.out=8))+
labs(title = gene_pair,
color = "Mean Antigen Level",
size = "T Cell Level")+
xlab("")+
ylab("")+
coord_fixed()
threshold <- quantile(df$velocity, 0.95)
# Assign colors based on the threshold
df$color <- ifelse(df$velocity > threshold, "red", "lightgrey")
# Plot using ggplot2
ggplot(df, aes(x = a, y = b, color = color)) +
geom_point(size = 0.3) +  # Scatter plot with points
scale_color_identity() +  # Use predefined colors
theme_minimal() +
labs(title = "Spatial Distribution of Points",
x = "X Location", y = "Y Location")
plot.density(df$velocity)
plot(density(df$velocity))
quantile(density)
quantile(df$velocity)
# Simulate the delayed scenario
set.seed(789)  # For reproducibility
delayed_granger_scores <- c()
for (i in 1:2000) {  # Simulate 100 delayed pairs
# Generate velo_base with larger variance
velo_base <- rnorm(10, mean = 0, sd = 1)  # Larger variance (sd = 1)
# Add noise to velo_base
noise <- rnorm(10, mean = 0, sd = 0.5)   # Noise with larger variance
velo_base_disturbed <- velo_base + noise  # Disturbed version of velo_base
# Create velo with a lag of 3 and noise
velo <- 3 * velo_base_disturbed[1:17] + rnorm(17, mean = 0, sd = 0.5)  # Linear delayed relationship with noise
velo_base <- velo_base[4:20]             # Trim to match delay (lag 3)
# Randomly shift some values in velo and velo_base
shift_indices <- sample(1:17, 5)  # Randomly choose indices to shift
velo_base[shift_indices] <- velo_base[shift_indices] + rnorm(5, mean = 0, sd = 0.2)
velo[shift_indices] <- velo[shift_indices] + rnorm(5, mean = 0, sd = 0.2)
# Check for sufficient variance
if (var(velo_base) > 1e-6 && var(velo) > 1e-6) {
score <- grangertest(velo_base, velo, order = 2)[2, 3]
delayed_granger_scores <- c(delayed_granger_scores, score)
}
}
# Remove NaN values
delayed_granger_scores <- delayed_granger_scores[!is.nan(delayed_granger_scores)]
# Add the delayed scenario to the data list
granger_scores_by_folder[["Delayed"]] <- delayed_granger_scores
# Convert the list to a data frame for plotting
plot_data <- do.call(rbind, lapply(names(granger_scores_by_folder), function(folder) {
data.frame(folder = folder, score = granger_scores_by_folder[[folder]])
}))
###################################################################
# 4. Density plot of delay statistics
###################################################################
# Create a new column to categorize data into three groups: Delayed, Random, and Group 3 (others)
plot_data$group <- ifelse(plot_data$folder == "Delayed", "Delayed",
ifelse(plot_data$folder == "Random", "Random", "Observed"))
# Create a list of unique folders from group 3
group3_folders <- unique(plot_data$folder[plot_data$group == "Observed"])
# Initialize an empty list to store plots
plots_list <- list()
# Loop through each folder in group 3 and create a density plot
for (folder_name in group3_folders) {
# Filter the data for the current group 3 folder
group3_data <- plot_data[plot_data$folder == folder_name, ]
# Combine "Delayed" and "Random" data with the current group 3 folder data
combined_data <- rbind(
plot_data[plot_data$group == "Delayed", ],  # Delayed group data
plot_data[plot_data$group == "Random", ],   # Random group data
group3_data                                  # Current group 3 folder data
)
# Create a density plot for the current folder, comparing all three groups
p <- ggplot(combined_data, aes(x = score, color = group)) +
geom_density() +
xlim(0, 20) +
labs(title = paste("Density Plot for", folder_name), y = "Density", x = "F-Statistic") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels for better readability
scale_color_manual(values = c("Delayed" = "blue", "Random" = "red", "Observed" = "green"))
# Add the plot to the list
plots_list[[folder_name]] <- p
}
# Combine all the plots into one figure with multiple subplots
library(gridExtra)
grid.arrange(grobs = plots_list, ncol = 2)  # You can adjust ncol for the number of columns in the grid
